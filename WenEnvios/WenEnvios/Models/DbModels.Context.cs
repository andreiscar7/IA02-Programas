//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WenEnvios.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DbModels : DbContext
    {
        public DbModels()
            : base("name=DbModels")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Cliente> Cliente { get; set; }
        public DbSet<Descuento> Descuento { get; set; }
        public DbSet<Producto> Producto { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<TipoEnvio> TipoEnvio { get; set; }
        public DbSet<TipoProducto> TipoProducto { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_eliminar_cli(Nullable<int> iDProduto)
        {
            var iDProdutoParameter = iDProduto.HasValue ?
                new ObjectParameter("IDProduto", iDProduto) :
                new ObjectParameter("IDProduto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_eliminar_cli", iDProdutoParameter);
        }
    
        public virtual ObjectResult<usp_listar_cli_Result> usp_listar_cli()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_listar_cli_Result>("usp_listar_cli");
        }
    
        public virtual ObjectResult<usp_listar_pro_Result> usp_listar_pro()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_listar_pro_Result>("usp_listar_pro");
        }
    
        public virtual int usp_modificar_cli(Nullable<int> iDProduto, Nullable<int> tPProducto, Nullable<int> iDCliente, Nullable<int> tEEnvio, string pBodegaEntrega, string placa, string pPuertoEntrega, Nullable<int> pNumeroFlota, string pNoGuia, Nullable<int> precio, Nullable<int> cantidad, Nullable<int> descuento, Nullable<int> total)
        {
            var iDProdutoParameter = iDProduto.HasValue ?
                new ObjectParameter("IDProduto", iDProduto) :
                new ObjectParameter("IDProduto", typeof(int));
    
            var tPProductoParameter = tPProducto.HasValue ?
                new ObjectParameter("TPProducto", tPProducto) :
                new ObjectParameter("TPProducto", typeof(int));
    
            var iDClienteParameter = iDCliente.HasValue ?
                new ObjectParameter("IDCliente", iDCliente) :
                new ObjectParameter("IDCliente", typeof(int));
    
            var tEEnvioParameter = tEEnvio.HasValue ?
                new ObjectParameter("TEEnvio", tEEnvio) :
                new ObjectParameter("TEEnvio", typeof(int));
    
            var pBodegaEntregaParameter = pBodegaEntrega != null ?
                new ObjectParameter("PBodegaEntrega", pBodegaEntrega) :
                new ObjectParameter("PBodegaEntrega", typeof(string));
    
            var placaParameter = placa != null ?
                new ObjectParameter("Placa", placa) :
                new ObjectParameter("Placa", typeof(string));
    
            var pPuertoEntregaParameter = pPuertoEntrega != null ?
                new ObjectParameter("PPuertoEntrega", pPuertoEntrega) :
                new ObjectParameter("PPuertoEntrega", typeof(string));
    
            var pNumeroFlotaParameter = pNumeroFlota.HasValue ?
                new ObjectParameter("PNumeroFlota", pNumeroFlota) :
                new ObjectParameter("PNumeroFlota", typeof(int));
    
            var pNoGuiaParameter = pNoGuia != null ?
                new ObjectParameter("PNoGuia", pNoGuia) :
                new ObjectParameter("PNoGuia", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_modificar_cli", iDProdutoParameter, tPProductoParameter, iDClienteParameter, tEEnvioParameter, pBodegaEntregaParameter, placaParameter, pPuertoEntregaParameter, pNumeroFlotaParameter, pNoGuiaParameter, precioParameter, cantidadParameter, descuentoParameter, totalParameter);
        }
    
        public virtual int usp_modificar_pro(Nullable<int> tPProducto, string tPNombre)
        {
            var tPProductoParameter = tPProducto.HasValue ?
                new ObjectParameter("TPProducto", tPProducto) :
                new ObjectParameter("TPProducto", typeof(int));
    
            var tPNombreParameter = tPNombre != null ?
                new ObjectParameter("TPNombre", tPNombre) :
                new ObjectParameter("TPNombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_modificar_pro", tPProductoParameter, tPNombreParameter);
        }
    
        public virtual int usp_registrar_cli(Nullable<int> iDProduto, Nullable<int> tPProducto, Nullable<int> iDCliente, Nullable<int> tEEnvio, string pBodegaEntrega, string placa, string pPuertoEntrega, Nullable<int> pNumeroFlota, string pNoGuia, Nullable<int> precio, Nullable<int> cantidad, Nullable<int> descuento, Nullable<int> total)
        {
            var iDProdutoParameter = iDProduto.HasValue ?
                new ObjectParameter("IDProduto", iDProduto) :
                new ObjectParameter("IDProduto", typeof(int));
    
            var tPProductoParameter = tPProducto.HasValue ?
                new ObjectParameter("TPProducto", tPProducto) :
                new ObjectParameter("TPProducto", typeof(int));
    
            var iDClienteParameter = iDCliente.HasValue ?
                new ObjectParameter("IDCliente", iDCliente) :
                new ObjectParameter("IDCliente", typeof(int));
    
            var tEEnvioParameter = tEEnvio.HasValue ?
                new ObjectParameter("TEEnvio", tEEnvio) :
                new ObjectParameter("TEEnvio", typeof(int));
    
            var pBodegaEntregaParameter = pBodegaEntrega != null ?
                new ObjectParameter("PBodegaEntrega", pBodegaEntrega) :
                new ObjectParameter("PBodegaEntrega", typeof(string));
    
            var placaParameter = placa != null ?
                new ObjectParameter("Placa", placa) :
                new ObjectParameter("Placa", typeof(string));
    
            var pPuertoEntregaParameter = pPuertoEntrega != null ?
                new ObjectParameter("PPuertoEntrega", pPuertoEntrega) :
                new ObjectParameter("PPuertoEntrega", typeof(string));
    
            var pNumeroFlotaParameter = pNumeroFlota.HasValue ?
                new ObjectParameter("PNumeroFlota", pNumeroFlota) :
                new ObjectParameter("PNumeroFlota", typeof(int));
    
            var pNoGuiaParameter = pNoGuia != null ?
                new ObjectParameter("PNoGuia", pNoGuia) :
                new ObjectParameter("PNoGuia", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_registrar_cli", iDProdutoParameter, tPProductoParameter, iDClienteParameter, tEEnvioParameter, pBodegaEntregaParameter, placaParameter, pPuertoEntregaParameter, pNumeroFlotaParameter, pNoGuiaParameter, precioParameter, cantidadParameter, descuentoParameter, totalParameter);
        }
    
        public virtual int usp_registrar_pro(Nullable<int> tPProducto, string tPNombre)
        {
            var tPProductoParameter = tPProducto.HasValue ?
                new ObjectParameter("TPProducto", tPProducto) :
                new ObjectParameter("TPProducto", typeof(int));
    
            var tPNombreParameter = tPNombre != null ?
                new ObjectParameter("TPNombre", tPNombre) :
                new ObjectParameter("TPNombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_registrar_pro", tPProductoParameter, tPNombreParameter);
        }
    }
}
